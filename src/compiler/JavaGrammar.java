/* Generated By:JavaCC: Do not edit this line. JavaGrammar.java */
package compiler;

public class JavaGrammar implements JavaGrammarConstants {
  public static void main(String args []) throws ParseException
  {
    try {
            JavaGrammar parser = new JavaGrammar(System.in);
            parser.INICIO();
            System.out.println("Foi compilado com exito");
        } catch(Exception e) {
                System.out.println(e.getMessage());
                System.out.println("Foram encontrado erros");
        }
    /*while (true)    {      System.out.println("Reading from standard input...");      System.out.print("Enter an expression like \"1+(2+3)*4;\" :");      try      {        switch (JavaGrammar.Programa())        {          case 0 :           System.out.println("OK.");          break;          case 1 :           System.out.println("Goodbye.");          break;          default :           break;        }      }      catch (Exception e)      {        System.out.println("NOK.");        System.out.println(e.getMessage());        JavaGrammar.ReInit(System.in);      }      catch (Error e)      {        System.out.println("Oops.");        System.out.println(e.getMessage());        break;      }    }*/
  }

/*
* GRAMATICA DA LINGUAGEM JAVA
*/
  static final public void INICIO() throws ParseException {
    Programa();
  }

  static final public void Programa() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PACKAGE:
      DeclaracaoDePacote();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IMPORT:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      DeclaracaoDeImport();
    }
    DeclaracaoDeClasse();
  }

  static final public void DeclaracaoDePacote() throws ParseException {
    jj_consume_token(PACKAGE);
    jj_consume_token(IDENTIFICADOR);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      DeclaracaoEstendida();
    }
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void DeclaracaoDeImport() throws ParseException {
    jj_consume_token(IMPORT);
    jj_consume_token(IDENTIFICADOR);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PONTO:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      DeclaracaoEstendida();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PONTO_ASTERISCO:
      jj_consume_token(PONTO_ASTERISCO);
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void DeclaracaoEstendida() throws ParseException {
    jj_consume_token(PONTO);
    jj_consume_token(IDENTIFICADOR);
  }

  static final public void DeclaracaoDeClasse() throws ParseException {
    Modificador();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FINAL:
      jj_consume_token(FINAL);
      break;
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(CLASS);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(AC);
    CorpoDaClasse();
    jj_consume_token(FC);
  }

  static final public void CorpoDaClasse() throws ParseException {
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 74:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_4;
      }
      Main();
    }
  }

  static final public void Main() throws ParseException {
    jj_consume_token(74);
    jj_consume_token(AP);
    jj_consume_token(STRING);
    jj_consume_token(AB);
    jj_consume_token(FB);
    jj_consume_token(IDENTIFICADOR);
    jj_consume_token(FP);
    BlocoDeDeclaracoes();
  }

  static final public void Modificador() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIVATE:
      jj_consume_token(PRIVATE);
      break;
    case PROTECTED:
      jj_consume_token(PROTECTED);
      break;
    case PUBLIC:
      jj_consume_token(PUBLIC);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BlocoDeDeclaracoes() throws ParseException {
    jj_consume_token(AC);
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RETURN:
      case PRINT:
      case IF:
      case WHILE:
      case INT:
      case FLOAT:
      case STRING:
      case CHAR:
      case BOOLEAN:
      case VOID:
      case AP:
      case NEGACAO:
      case IDENTIFICADOR:
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      CorpoDaDeclaracao();
    }
    jj_consume_token(FC);
  }

  static final public void CorpoDaDeclaracao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
    case FLOAT:
    case STRING:
    case CHAR:
    case BOOLEAN:
    case VOID:
      TipoDeDado();
      jj_consume_token(IDENTIFICADOR);
      DeclaracaoDeVariavel();
      break;
    case RETURN:
      jj_consume_token(RETURN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NULL:
      case TRUE:
      case FALSE:
      case INT:
      case FLOAT:
      case STRING:
      case CHAR:
      case BOOLEAN:
      case VOID:
        OpcoesDeRetorno();
        break;
      default:
        jj_la1[9] = jj_gen;
        ;
      }
      jj_consume_token(PONTO_VIRGULA);
      break;
    case IF:
      If_Else();
      break;
    case PRINT:
      Print();
      break;
    case WHILE:
      While();
      break;
    case AP:
    case NEGACAO:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      Expressao();
      jj_consume_token(PONTO_VIRGULA);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void TipoDeDado() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case FLOAT:
      jj_consume_token(FLOAT);
      break;
    case STRING:
      jj_consume_token(STRING);
      break;
    case CHAR:
      jj_consume_token(CHAR);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    case VOID:
      jj_consume_token(VOID);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DeclaracaoDeVariavel() throws ParseException {
    InicializacaoDeVariavel();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[12] = jj_gen;
        break label_6;
      }
      jj_consume_token(VIRGULA);
      jj_consume_token(IDENTIFICADOR);
      InicializacaoDeVariavel();
    }
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void InicializacaoDeVariavel() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ATRIBUICAO:
      jj_consume_token(ATRIBUICAO);
      OpcoesDeInicializacao();
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
  }

  static final public void OpcoesDeInicializacao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      break;
    case FALSE:
      jj_consume_token(FALSE);
      break;
    case TRUE:
      jj_consume_token(TRUE);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void OpcoesDeRetorno() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
    case TRUE:
    case FALSE:
      OpcoesDeInicializacao();
      break;
    case INT:
    case FLOAT:
    case STRING:
    case CHAR:
    case BOOLEAN:
    case VOID:
      TipoDeDado();
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void If_Else() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(AP);
    Expressao();
    jj_consume_token(FP);
    BlocoDeDeclaracoes();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      BlocoDeDeclaracoes();
      break;
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  static final public void Print() throws ParseException {
    jj_consume_token(PRINT);
    jj_consume_token(AP);
    Expressao();
    jj_consume_token(FP);
    jj_consume_token(PONTO_VIRGULA);
  }

  static final public void While() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(AP);
    Expressao();
    jj_consume_token(FP);
    BlocoDeDeclaracoes();
  }

  static final public void Expressao() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEGACAO:
      jj_consume_token(NEGACAO);
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case IDENTIFICADOR:
        jj_consume_token(IDENTIFICADOR);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case AP:
        case INCREMENTO:
        case DECREMENTO:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case AP:
            ChamadaDeMetodo();
            break;
          case INCREMENTO:
            jj_consume_token(INCREMENTO);
            break;
          case DECREMENTO:
            jj_consume_token(DECREMENTO);
            break;
          default:
            jj_la1[18] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[19] = jj_gen;
          ;
        }
        break;
      case INTEGER_LITERAL:
      case FLOATING_POINT_LITERAL:
      case CHARACTER_LITERAL:
      case STRING_LITERAL:
        ExpressaoLiteral();
        break;
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case SOMA:
      case SUBTRACAO:
      case MUTIPLICACAO:
      case DIVISAO:
      case MODULO:
      case SOMA_PLUS:
      case SUBTRACAO_PLUS:
      case MULTIPLICACAO_PLUS:
      case DIVISAO_PLUS:
      case MODULO_PLUS:
      case ATRIBUICAO:
      case IGUALDADE:
      case DIFERENCA:
      case MENOR:
      case MAIOR:
      case MENOR_IGUAL:
      case MAIOR_IGUAL:
      case AND:
      case OR:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case ATRIBUICAO:
          Atribuicao();
          break;
        case AND:
        case OR:
          ComparacaoLogica();
          break;
        case IGUALDADE:
        case DIFERENCA:
        case MENOR:
        case MAIOR:
        case MENOR_IGUAL:
        case MAIOR_IGUAL:
          ComparacaoRelacional();
          break;
        case SOMA:
        case SUBTRACAO:
        case MUTIPLICACAO:
        case DIVISAO:
        case MODULO:
        case SOMA_PLUS:
        case SUBTRACAO_PLUS:
        case MULTIPLICACAO_PLUS:
        case DIVISAO_PLUS:
        case MODULO_PLUS:
          ExpressaoNumerica();
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
      break;
    case AP:
      jj_consume_token(AP);
      Expressao();
      jj_consume_token(FP);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ChamadaDeMetodo() throws ParseException {
    jj_consume_token(AP);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AP:
    case NEGACAO:
    case IDENTIFICADOR:
    case INTEGER_LITERAL:
    case FLOATING_POINT_LITERAL:
    case CHARACTER_LITERAL:
    case STRING_LITERAL:
      ListaDeArgumentos();
      break;
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    jj_consume_token(FP);
  }

  static final public void ListaDeArgumentos() throws ParseException {
    Expressao();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case VIRGULA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_7;
      }
      jj_consume_token(VIRGULA);
      Expressao();
    }
  }

  static final public void ExpressaoLiteral() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INTEGER_LITERAL:
      jj_consume_token(INTEGER_LITERAL);
      break;
    case FLOATING_POINT_LITERAL:
      jj_consume_token(FLOATING_POINT_LITERAL);
      break;
    case CHARACTER_LITERAL:
      jj_consume_token(CHARACTER_LITERAL);
      break;
    case STRING_LITERAL:
      jj_consume_token(STRING_LITERAL);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Atribuicao() throws ParseException {
    jj_consume_token(ATRIBUICAO);
    Expressao();
  }

  static final public void ComparacaoLogica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      break;
    case OR:
      jj_consume_token(OR);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expressao();
  }

  static final public void ComparacaoRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MAIOR:
      jj_consume_token(MAIOR);
      break;
    case MENOR:
      jj_consume_token(MENOR);
      break;
    case MAIOR_IGUAL:
      jj_consume_token(MAIOR_IGUAL);
      break;
    case MENOR_IGUAL:
      jj_consume_token(MENOR_IGUAL);
      break;
    case IGUALDADE:
      jj_consume_token(IGUALDADE);
      break;
    case DIFERENCA:
      jj_consume_token(DIFERENCA);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expressao();
  }

  static final public void ExpressaoNumerica() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SOMA:
      jj_consume_token(SOMA);
      break;
    case SOMA_PLUS:
      jj_consume_token(SOMA_PLUS);
      break;
    case SUBTRACAO:
      jj_consume_token(SUBTRACAO);
      break;
    case SUBTRACAO_PLUS:
      jj_consume_token(SUBTRACAO_PLUS);
      break;
    case MUTIPLICACAO:
      jj_consume_token(MUTIPLICACAO);
      break;
    case MULTIPLICACAO_PLUS:
      jj_consume_token(MULTIPLICACAO_PLUS);
      break;
    case DIVISAO:
      jj_consume_token(DIVISAO);
      break;
    case DIVISAO_PLUS:
      jj_consume_token(DIVISAO_PLUS);
      break;
    case MODULO:
      jj_consume_token(MODULO);
      break;
    case MODULO_PLUS:
      jj_consume_token(MODULO_PLUS);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    Expressao();
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public JavaGrammarTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[30];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000,0x1000,0x0,0x0,0x0,0x20000000,0x0,0xc0000000,0xfcb8000,0xff00800,0xfcb8000,0xfc00000,0x0,0x0,0x300800,0xff00800,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x100,0x100,0x400,0x0,0x0,0x1,0x8,0x0,0x8,0x0,0x80,0x200000,0x0,0x0,0x0,0x0,0xc00008,0xc00008,0x0,0xff3ff800,0xff3ff800,0x8,0x8,0x80,0x0,0xc0000000,0x3f000000,0x1ff800,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x400,0x0,0x353,0x0,0x353,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x352,0x0,0x0,0x352,0x353,0x0,0x350,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public JavaGrammar(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public JavaGrammar(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new JavaGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public JavaGrammar(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new JavaGrammarTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public JavaGrammar(JavaGrammarTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(JavaGrammarTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 30; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[75];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 30; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 75; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
